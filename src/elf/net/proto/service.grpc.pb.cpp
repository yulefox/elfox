// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/service.proto

#include "proto/service.pb.h"
#include "proto/service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace proto {

static const char* GameService_method_names[] = {
  "/proto.GameService/Tunnel",
};

std::unique_ptr< GameService::Stub> GameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< GameService::Stub> stub(new GameService::Stub(channel));
  return stub;
}

GameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Tunnel_(GameService_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::proto::Packet, ::proto::Packet>* GameService::Stub::TunnelRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::proto::Packet, ::proto::Packet>(channel_.get(), rpcmethod_Tunnel_, context);
}

::grpc::ClientAsyncReaderWriter< ::proto::Packet, ::proto::Packet>* GameService::Stub::AsyncTunnelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::proto::Packet, ::proto::Packet>(channel_.get(), cq, rpcmethod_Tunnel_, context, tag);
}

GameService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      GameService_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< GameService::Service, ::proto::Packet, ::proto::Packet>(
          std::mem_fn(&GameService::Service::Tunnel), this)));
}

GameService::Service::~Service() {
}

::grpc::Status GameService::Service::Tunnel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::Packet, ::proto::Packet>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

