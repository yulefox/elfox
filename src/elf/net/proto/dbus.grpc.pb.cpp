// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/dbus.proto

#include "proto/dbus.pb.h"
#include "proto/dbus.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace pb {

static const char* DBus_method_names[] = {
  "/pb.DBus/Stream",
};

std::unique_ptr< DBus::Stub> DBus::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DBus::Stub> stub(new DBus::Stub(channel));
  return stub;
}

DBus::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Stream_(DBus_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::pb::Packet, ::pb::Packet>* DBus::Stub::StreamRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::pb::Packet, ::pb::Packet>(channel_.get(), rpcmethod_Stream_, context);
}

::grpc::ClientAsyncReaderWriter< ::pb::Packet, ::pb::Packet>* DBus::Stub::AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::pb::Packet, ::pb::Packet>(channel_.get(), cq, rpcmethod_Stream_, context, tag);
}

DBus::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DBus_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< DBus::Service, ::pb::Packet, ::pb::Packet>(
          std::mem_fn(&DBus::Service::Stream), this)));
}

DBus::Service::~Service() {
}

::grpc::Status DBus::Service::Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pb::Packet, ::pb::Packet>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

